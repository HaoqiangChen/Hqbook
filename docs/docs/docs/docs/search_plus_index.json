{"./":{"url":"./","title":"介绍","keywords":"","body":" hqbook 介绍 学的不仅是技术，更是人生！ hqbook其实是我个人平时学习笔记，就是零散记点编程知识点。方便平时查阅。并且把hqbook利用GitHub / Git和Markdown 构建成精美的书籍。 作者 大家叫我小浩就OK啦，后面有必要我也会用小浩自称 本项目地址 仓库：https://github.com/HaoqiangChen/hqbook 在线阅读：https://chq.github.io/hqbook Build Setup 克隆代码到本地之后，可以查看本书 Gitbook 笔记了解如何运行本项目。 # 如果`gitbook`没有安装，运行下面的命令，如果有，忽略它 npm install -g gitbook-cli # 安装依赖 gitbook install or npm install (推荐) # 启动服务和热更新并打开`localhost:4000` gitbook serve # 打包压缩项目 gitbook build # `gitbook serve`时其实已经打包好到`_book`并运行项目的，所以可以省略打包步骤，直接将`_book`重命名为`_book`， # 这样子docs文件夹得以发布到GitHub pages，注意在GitHub上将项目设置里的GitHub pages网站构建选择为 master/branch /docs folder rename _book docs # 删除docs文件夹内所有md文件，避免GitHub pages构建失败 del /S /Q docs\\*.md 技术栈 前端 HTML5：待记录 样式：待记录 JavaScript：待记录 jQuery：待记录 。。。等等：待记录 移动端 小程序：待记录 后端 Node.js：待记录 。。。等等：待记录 工具 Gitbook Markdown 其他 服务器：待记录 最后 如果觉得我的笔记还不错的话 :clap:，就给个 star :star: 鼓励一下吧~ "},"Tools/gitbook/":{"url":"Tools/gitbook/","title":"Gitbook","keywords":"","body":"Gitbook 使用教程 使用 Git 和 Markdown 制作精美在线电子书。 支持格式 GitBook支持输出多种文档格式，如： 静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上； PDF：需要安装ebook-concert依赖； eBook：需要安装ebook-concert； 单HTML网页：支持将内容输出为单页的HTML，不过一般用在将电子书格式转换为PDF或eBook的中间过程； JSON：一般用于电子书的调试或元数据提取。 Gitbook项目地址 GitBook项目官网：http://www.gitbook.io GitBook Github地址：https://github.com/GitbookIO/gitbook GitBook 文档中文版：http://gitbook.hushuang.me/setup.html 安装和使用GitBook 完成GitBook的安装只需要几分钟。 GitBook.com GitBook.com为您提供简单高效的图书在线撰写、发布和托管方案， 你可以通过GitBook.com进行在线编辑、或者使用GitBook 本地编辑器在本地电脑上编辑。 本地安装gitbook-cli 安装GitBook的最好方法是通过 NPM 安装。在已经安装好NodeJS和NPM的电脑上，通过命令行窗口，输入以下命令安装GitBook： $ npm install gitbook-cli -g 安装完成之后，你可以使用下面的命令来检验是否安装成功 $ gitbook -V CLI version: 2.3.2 GitBook version: 3.2.3 如果你看到了上面类似的版本信息，则表示你已经安装成功了。 安装其他版本 gitbook命令可以方便地下载和安装不同版本的GitBook来测试你的书： $ gitbook fetch 4.0.0-alpha.1 使用gitbook ls-remote列出可用于安装的远程版本。 $ gitbook ls-remote Available GitBook Versions: 4.0.0-alpha.5, ...部分省略..., 4.0.0-alpha.1, 3.2.2, 3.2.1, ...部分省略..., 2.0.0-alpha.1 Tags: latest : 3.2.2 pre : 4.0.0-alpha.5 调试 您可以使用--log=debug和--debug来获得更详细的错误消息（堆栈跟踪）。例如： $ gitbook serve ./ --log=debug --debug or $ gitbook build ./ --log=debug --debug gitbook-cli命令行使用 gitbook-cli是一个命令行工具，使用方法： 初始化 初始化一本书 gitbook init 在使用 gitbook init 之后本地会生成两个文件 README.md 和 SUMMARY.md ，这两个文件都是必须的，一个为介绍，一个为目录结构。 编辑电子书 首先，GitBook使用SUMMARY.md文件组织整个内容的目录，比如可以新建 Faq.md 文件，来记录常见问题，并在 SUMMARY.md 文件中添加目录。 # Summary * [简介](README.md) * [常见问题](Faq.md) 本地预览 当内容书写完毕后，可以在终端中输入如下命令，实现实时预览 gitbook serve gitbook serve ./{book_name} gitbook serve 命令实际会先调用 gitbook build 编译书籍，完成后打开 web 服务器，默认监听本地 4000 端口，在浏览器打开 http://localhost:4000 即可浏览电子书。 [!Warning|label: 注意] windows 系统上启动 gitbook 服务后,如果本地文件发生更改,热加载会失败。由于官方已经停止更新，所以找不到其他方法可以解决。小浩目前有个不是方法中的方法，如果启动服务器后立即删除 _book 目录,那么之后再怎么修改本地文件都能顺利重启。 发布电子书 gitbook build gitbook build ./{book_name} --output=./{outputFolde} gitbook build ./ --log=debug --debug 当电子书内容制作好之后，可以使用如下命令来生成 HTML 静态网页版电子书。该命令会在当前文件夹中生成 _book 文件夹，这个文件夹中的内容就是静态网页版电子书。 使用 --log=debug --debug 可以用来调试，会打印出 stack trace。 查看帮助 $ gitbook -h 目录结构 GitBook使用SUMMARY文件管理目录结构，文件支持Markdown和Asciidoc两种语法。 GitBook按照SUMMARY文件中的目录结构生成HTML。 如果你通过GitBook创建一本支持多语言文档，目录结构会稍微不同，具体可参考多语言环境。 一般GitBook目录如下： . ├── book.json ├── README.md ├── SUMMARY.md ├── chapter-1/ | ├── README.md | └── something.md └── chapter-2/ ├── README.md └── something.md 简单的介绍下每个文件的作用： 文件 说明 book.json 保存 配置文件 数据 (可选) README.md 简介 - 书籍的简单介绍 (必填) SUMMARY.md 目录 (参见 目录管理) (可选) GLOSSARY.md 字段/注释 - 专业术语列表 (参见 词汇表) (可选) 静态文件和图像 静态文件是SUMMARY.md中没有列出的文件。所有的静态文件，除非被忽略文件和文件夹，否则都会被复制到输出中，包含图片、JS、CSS都会复制到对应目录下。 忽略文件和文件夹 GitBook将读取.gitignore、.bookignore和.ignore文件，以获取要忽略的文件和文件夹的列表。被忽略的文件不会被上传到版本中。 这些文件中的格式遵循与.gitignore相同的约定： ＃井号代表这是一行注释 ＃忽略文件test.md test.md ＃忽略目录“bin”中的所有内容 bin/* 以子目录的方式与项目集成 对于软件项目，您可以使用子目录（如docs/）来存储用于项目文档的书。您可以配置配置以指示GitBook可以在其中找到书籍文件的文件夹： . ├── book.json └── docs/ ├── README.md └── SUMMARY.md book.json 中的配置如下： { \"root\": \"./docs\" } 菜单与页面（Summary.md) Summary GitBook使用一个 SUMMARY.md 文件来定义文档的菜单。 SUMMARY.md中[]内的内容是标题，()内是文档的路径，章节和子章节用四个空格或者tab键来分级。 The format of SUMMARY.md is just a list of links. The link's title is used as the chapter's title, and the link's target is a path to that chapter's file. Adding a nested list to a parent chapter will create subchapters. 简单示例 # 概述 ### 第一部分 * [ 第一部分 ]（part1 / README.md） * [ 写作很好 ]（part1 / README.md＃writing） * [ GitBook很不错 ]（part1 / README.md＃gitbook） * [第二部分](part2/README.md) * [我们喜欢社交网络](part2/README.md#feedback) * [更好的写作工具](part2/README.md#tools) 每一个章节都有一个专用的页面（part1/README.md#），并被分割成子章节。 锚点 文章可以使用区域导航定位到文件的特定部分。 在md文件结尾使用#号加上文章内容中章节的标题就能实现锚点 # 概述 ### 第一部分 * [ 第一部分 ]（part1 / README.md） * [ 写作很好 ]（part1 / README.md＃writing） * [ GitBook很不错 ]（part1 / README.md＃gitbook） 部分 目录可以分为由标题或水平线分隔的部分： # 概述 ### 第一部分 * [ 写的很好 ]（part1 / writing.md） * [ GitBook的很好 ]（part1 / gitbook.md） ### 第二部分 * [ 我们喜欢反馈 ]（part2 / feedback_please.md） * [ 给作者的更好工具 ]（part2 / better_tools.md） ---- * [ 没有标题的最后一部分 ]（part3 / title.md） 部分仅是章节的组，没有专用页面，但是根据主题，它将显示在导航中。 页面 Markdown语法 默认情况下，GitBook的大多数文件都使用Markdown语法。GitBook从中推断出您页面的结构。使用的语法类似于GitHub Flavored Markdown语法。也可以选择AsciiDoc语法。 章节文件示例 ＃ 本章标题 这是一个很棒的介绍。 ## 第1节 Markdown将决定您**书的结构_most_ ## 第2节 ... 顶部描述 页面可以用它作为描述。 它使用YAML格式的风格，在三条虚线之间。 文档中也可以不写顶部描述。 [!Tip|label: 特别提示：] 在没有安装支持插件之前，不要在文件中使用，否则编译或者运行会失败。 这里有一个基本示例： --- description: This is a short description of my page --- # The content of my page ... 顶部描述的内容可以定义自己的变量，可以参考页面变量，以便您可以在模板中使用它们。 Markdown语法 Markdown是GitBook的默认解析器，本文档基本上都是Markdown语法编写的。当然，你也可以选择AsciiDoc语法来编写文档。 AsciiDoc 从·2.0.0·版本开始，GitBook接受AsciiDoc语法文件作为输入格式。 有关格式的更多信息，请参阅AsciiDoc语法快速参考。 跟markdown一样，GitBook可以从下的面文件来提取结构：README.adoc，SUMMARY.adoc，LANGS.adoc和GLOSSARY.adoc。 主题 GitBook默认使用theme-default 主题，从3.0.0版本开始，可以自定义主题。 [!Warning|label: 注意：] 自定义主题可能会导致某些插件不能正常工作。 主题的结构 主题是包含模板和资源文件的插件。可以选择只对单独的模板进行替换，因为主题都从默认主题扩展。 文件夹 说明 _layouts 包含所有模板的主文件夹 _layouts/website/page.html 普通页面的模板 _layouts/ebook/page.html 在电子书生成期间正常页面的模板(PDF，ePub，Mobi) 自定义主题 你可以直接从已有的主题创建模板。模板将首先在书的_layouts文件夹中解析，然后在已安装的插件/主题中解析。 简单的扩展 如果你自定义主题的目的只是让不同的文档和书有不同的显示，你可以使用模板语法： {% extends template.self %} {% block body %} {{ super() }} ... 这将被添加到 \"body\" 块 {% endblock %} 完整的例子可参考主题API 。 发布主题 主题以theme-前缀插件方式发布，可参考(插件文档)。例如，主题awesome将从theme-awesome插件加载，然后从gitbook-plugin-theme-awesome NPM包加载。 "},"Tools/gitbook/config.html":{"url":"Tools/gitbook/config.html","title":"配置和插件","keywords":"","body":"配置 GitBook允许您使用灵活的配置来自定义您的书。这些选项在book.json文件中指定。对于不熟悉JSON语法的作者，您可以使用JSONlint之类的工具来验证语法。 常规设置 变量 说明 root 包含所有图书文件的根文件夹的路径，除了book.json structure 指定自述，摘要，词汇表等的路径。请参见结构段落. title 书的标题，默认值从README中提取。在GitBook.com上，此字段已预填。 description 您的图书说明，默认值从自述文件中提取。在GitBook.com上，此字段已预填。 author 作者姓名。在GitBook.com上，此字段已预填。 isbn 书的国际码ISBN language 图书语言的ISO代码 ，默认值是en direction 文本的方向。可以是rtl或ltr，默认值取决于language的值 gitbook GitBook的版本。使用SemVer规范并接受诸如“> = 3.0.0”的条件 其他属性设置 links: 在左侧导航栏添加链接信息 \"links\": { \"sidebar\" : { \"Home\" : \"https://www.baidu.com\" } } styles: 自定义页面样式， 默认情况下各generator对应的css文件 \"styles\": { \"website\": \"styles/website.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" } 例如使 标签有下边框， 可以在website.css中设置 h1 , h2{ border-bottom: 1px solid #EFEAEA; } 结构体 除了root变量，你可以告诉Gitbook Readme，Summary，Glossary，Languages的文件名(而不是使用默认名称，如README.md)。 这些文件必须在您的书的根(或每个语言书的根)。不接受诸如dir/MY_README.md之类的路径。 变量 说明 structure.readme 自述文件名（默认为README.md） structure.summary 摘要文件名（默认为SUMMARY.md） structure.glossary 词汇表文件名（默认为GLOSSARY.md） structure.languages 语言文件名（默认为LANGS.md） PDF选项 PDF输出可以使用book.json中的一组选项来定制： 变量 说明 pdf.pageNumbers 在每页底部添加页码（默认为true） pdf.fontSize 基本字体大小（默认为12） pdf.fontFamily 基本字体系列（默认为Arial） pdf.paperSize 纸张尺寸，选项为 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'legal', 'letter' (默认为 a4) pdf.margin.top 上边距 (默认为 56) pdf.margin.bottom 底边距 (默认为 56) pdf.margin.right 右边距 (默认为 62) pdf.margin.left 左边距 (默认为 62) 词汇表 您可以指定要显示为注释的术语及其相应的定义。 基于这些术语，GitBook在编译的时候会自动构建索引并在页面中突出显示这些术语。 GLOSSARY.md是一个h2标题的列表，以及一个描述段落： ## 条款 该术语的定义 ## 另一个名词 使用它的定义，它可以包含粗体文本 以及所有其他类型的内联标记... 多种语言 GitBook支持多种语言编写的书籍或者文档。 首先需要在根目录创建一个名为LANGS.md的文件，然后按照语言创建子目录： # Languages * [中文](zh/) * [English](en/) * [French](fr/) * [Español](es/) 每种语言的配置 每个语言(例如：en)目录中都可以有一个book.json来定义自己的配置，它将作为主配置的扩展。 唯一的例外是插件，插件是全局指定的，语言环境配置不能指定特定的插件。 Markdown语法 Markdown是GitBook的默认解析器，本文档基本上都是Markdown语法编写的。当然，你也可以选择AsciiDoc语法来编写文档。 AsciiDoc 从·2.0.0·版本开始，GitBook接受AsciiDoc语法文件作为输入格式。 有关格式的更多信息，请参阅AsciiDoc语法快速参考。 跟markdown一样，GitBook可以从下的面文件来提取结构：README.adoc，SUMMARY.adoc，LANGS.adoc和GLOSSARY.adoc。 插件 可以通过 Gitbook 的插件来扩展 Gitbook 的功能，现有的 Gitbook 插件能够实现数学公式，Google 统计，评论等等功能。 所有的插件都可以从 https://plugins.gitbook.com/ 获取。 变量 说明 plugins 要加载的插件列表 pluginsConfig 插件配置 安装插件 Gitbook 安装插件比较简单，需要在项目下添加 book.json 文件，然后在其中添加 { \"plugins\": [\"plugins1\", \"plugins2\"], \"pluginsConfig\": { \"plugins1\": {} } } 注册完插件之后，可以通过下面的命令来安装插件 gitbook install Gitbook默认自带5个插件 highlight：代码高亮，通常会使用 prism 来替换 search：导航栏查询功能（不支持中文），所以通常会使用 search-pro 来替换 sharing：右上角分享功能 font-settings：字体设置（最上方的\"A\"符号） livereload：为GitBook实时重新加载 [!Tip] 可以在插件名称前面加 - 去除自带插件，例如常用去除自带搜索 \"plugins\": [ \"-search\" ] 常用的插件 下面列举一些常用的gitbook插件，至于怎么加上自己开发的插件，这里就不多说了，感兴趣的可以看这篇中文文档。 用法：在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（单独安装推荐NPM）npm install gitbook-plugin-插件名，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） 修改页面样式 ad 在每个页面顶部和底部添加广告或任何自定义内容 ➡️ https://github.com/zhaoda/gitbook-plugin-ad Advanced Emoji 支持emoji表情 ➡️ https://github.com/codeclou/gitbook-plugin-advanced-emoji anchors 标题带有 github 样式的锚点 ➡️ https://github.com/rlmv/gitbook-plugin-anchors anchor-navigation 锚点导航 ➡️ https://github.com/yaneryou/gitbook-plugin-anchor-navigation anchor-navigation-ex 插件锚导航-EX ➡️ https://github.com/zq99299/gitbook-plugin-anchor-navigation-ex auto-scroll-table 表格滚动条(为避免表格过宽，增加滚动条) ➡️ https://www.jianshu.com/p/427b8bb066e6 autotheme 自动换肤插件(早中晚自动切换) ➡️ https://github.com/willin/gitbook-plugin-autotheme change_girls 可自动切换的背景 ➡️ https://github.com/zhenchao125/gitbook-plugin-change_girls custom-favicon 修改标题栏图标 ➡️ https://github.com/Bandwidth/gitbook-plugin-custom-favicon chapter-fold 左侧目录折叠 ➡️ https://github.com/ColinCollins/gitbook-plugin-chapter-fold expandable-chapters 收起或展开章节目录中的父节点 ➡️ https://github.com/DomainDrivenArchitecture/gitbook-plugin-expandable-chapters expandable-chapters-small 折叠侧边栏 ➡️ https://github.com/lookdczar/gitbook-plugin-expandable-chapters-small-auto [!Tip|label: 这三款目录折叠的区别是：] expandable-chapters-small 和 expandable-chapters 效果相同，唯一不同的是expandable-chapters这个插件的箭头粗；另外这两款只有点击箭头才能实现折叠扩展。不如【chapter-fold 左侧目录折叠】好用 editlink 顶部显示编辑此页 ➡️ https://github.com/zhaoda/gitbook-plugin-editlink emphasize 为文字加上底色 ➡️ https://github.com/GitbookIO/plugin-emphasize favicon 更改网站的 favicon.ico ➡️ https://github.com/menduo/gitbook-plugin-favicon flexible-alerts 将块引用转换为漂亮的警报 ➡️ https://github.com/zanfab/gitbook-plugin-flexible-alerts github-buttons 显示 github 仓库的star和fork按钮 ➡️ https://github.com/azu/gitbook-plugin-github-buttons hide-element 隐藏元素 ➡️ https://github.com/gonjay/gitbook-plugin-hide-element insert-logo 将logo插入到导航栏上方中 ➡️ https://github.com/matusnovak/gitbook-plugin-insert-logo localized-footer 为 Gitbook 每一个页面添加页脚 ➡️ https://github.com/noerw/gitbook-plugin-localized-footer#readme prism 基于 Prism 的代码高亮 ➡️ https://github.com/gaearon/gitbook-plugin-prism page-copyright 自定义页面页脚版权（内容多） ➡️ https://github.com/skyFi/gitbook-plugin-page-footer splitter 在左侧目录和右侧内容之间添加一个可以拖拽的栏，用来调整两边的宽度 ➡️ https://github.com/yoshidax/gitbook-plugin-splitter styles-sass 使用 SASS 替换 CSS ➡️ https://github.com/GitbookIO/plugin-styles-sass styles-less 使用 LESS 替换 CSS ➡️ https://github.com/GitbookIO/plugin-styles-less sectionx 分离各个段落，并提供一个展开收起的按钮 ➡️ https://github.com/ymcatar/gitbook-plugin-sectionx tbfed-pagefooter 自定义页脚，显示版权和最后修订时间 ➡️ https://github.com/zhj3618/gitbook-plugin-tbfed-pagefooter theme-fexa 基于gitbook主题机制定制的主题 ➡️ https://github.com/tonyyls/gitbook-plugin-theme-fexa 功能增强 ace 插入代码高亮编辑器 ➡️ https://github.com/ymcatar/gitbook-plugin-ace atoc 插入 TOC 目录 ➡️ https://github.com/willin/gitbook-plugin-atoc accordion 手风琴，可以实现将内容隐藏起来 ➡️ https://github.com/artalar/gitbook-plugin-accordion back-to-top-button 回到顶部 ➡️ https://github.com/stuebersystems/gitbook-plugin-back-to-top-button book-summary-scroll-position-saver 自动保存左侧目录区域导航条的位置 ➡️ https://github.com/yoshidax/gitbook-plugin-book-summary-scroll-position-saver baidu 使用百度统计 ➡️ https://github.com/poppinlp/gitbook-plugin-baidu click-reveal 默认隐藏，点击可显示。 ➡️ https://github.com/c4software/gitbook-plugin-click-reveal code 代码添加行号&复制按钮 ➡️ https://github.com/davidmogar/gitbook-plugin-code copy-code-button 为代码块添加复制的按钮 ➡️ https://github.com/WebEngage/gitbook-plugin-copy-code-button chart 使用 C3.js 图表 ➡️ https://github.com/csbun/gitbook-plugin-chart Donate Gitbook 捐赠打赏插件 ➡️ https://github.com/willin/gitbook-plugin-donate disqus 添加 disqus 评论插件 ➡️ https://github.com/GitbookIO/plugin-disqus duoshuo 使用多说评论 ➡️ https://github.com/codepiano/gitbook-plugin-duoshuo ga 添加 Google 统计代码 ➡️ https://github.com/GitbookIO/plugin-ga include-codeblock 通过引用文件插入代码 ➡️ https://github.com/azu/gitbook-plugin-include-codeblock jsfiddle 插入 JSFiddle 组件 ➡️ https://github.com/Mavrin/gitbook-plugin-jsfiddle jsbin 插入 JSBin 组件 ➡️ https://github.com/jcouyang/gitbook-plugin-jsbin mygitalk 基于gitalk的评论插件 ➡️ https://github.com/snowdreams1006/gitbook-plugin-mygitalk search-plus 支持中文搜索插件 ➡️ https://github.com/lwdgit/gitbook-plugin-search-plus search-pro 高级搜索（支持中文） ➡️ https://github.com/gitbook-plugins/gitbook-plugin-search-pro sitemap 生成站点地图 ➡️ https://github.com/GitbookIO/plugin-sitemap theme-api 编写 API 文档 ➡️ https://github.com/GitbookIO/theme-api mcqx 交互式多选插件 ➡️ https://github.com/ymcatar/gitbook-plugin-mcqx spoiler 隐藏答案，当鼠标划过时才显示 ➡️ https://github.com/ymcatar/gitbook-plugin-spoiler redirect 重定向页面跳转 ➡️ https://github.com/ketan/gitbook-plugin-redirect page-treeview 生成页内目录 ➡️ https://github.com/aleen42/gitbook-treeview simple-page-toc 生成本页目录 ➡️ https://github.com/stuebersystems/gitbook-plugin-simple-page-toc page-toc-button 悬浮目录 ➡️ https://github.com/stuebersystems/gitbook-plugin-page-toc-button Puml 使用 PlantUML 展示 uml 图 ➡️ https://github.com/GitbookIO/plugin-puml klipse 嵌入类似IDE的功能,可在代码段中实时交互，即（输入代码 > 执行结果 ➡️ https://github.com/brian-dawn/gitbook-plugin-klipse Todo 添加 Todo 功能 ➡️ https://github.com/ly-tools/gitbook-plugin-todo include-csv 展示 csv 文件内容 ➡️ https://github.com/TakuroFukamizu/gitbook-plugin-include-csv musicxml 支持 musicxml 格式的乐谱渲染 ➡️ https://github.com/ymcatar/gitbook-plugin-musicxml versions-select 添加版本选择的下拉菜单，针对文档有多个版本的情况 ➡️ https://github.com/prescottprue/gitbook-plugin-versions-select rss 添加 rss 订阅功能 ➡️ https://github.com/denysdovhan/gitbook-plugin-rss multipart 将书籍分成几个部分 ➡️ https://github.com/citizenmatt/gitbook-plugin-multipart url-embed 嵌入动态内容 ➡️ https://github.com/basilvetas/gitbook-plugin-url-embed pageview-count 阅读量计数 ➡️ https://github.com/tinys/gitbook-plugin-pageview-count 查看图片 image-captions 抓取内容中图片的alt或title属性，在图片下面显示标题 ➡️ https://github.com/todvora/gitbook-plugin-image-captions popup 单击图片，在新页面查看大图。 ➡️ https://github.com/somax/gitbook-plugin-popup lightbox 点击图片可显示，大小不变 ➡️ https://github.com/vongola12324/gitbook-plugin-lightbox 数学插件 & Tex fbqx 使用填空题 ➡️ https://github.com/Erwin-Chan/gitbook-plugin-fbqx Graph 使用 function-plot 绘制数学函数图 ➡️ https://github.com/cjam/gitbook-plugin-graph katex 使用KaTex进行数学排版 ➡️ https://github.com/GitbookIO/plugin-katex latex-codecogs 使用数学方程式 ➡️ https://github.com/GitbookIO/plugin-latex-codecogs mathjax 支持数学方程式 ➡️ https://www.mathjax.org/ mermaid 使用流程图 ➡️ https://github.com/JozoVilcek/gitbook-plugin-mermaid [!Tip|label: MathJax 和 KaTeX 的区别] mathjax 和 katex 插件是 Tex 公式绘制的不同实现，它们基于各自的开源库：KaTeX 和 MathJax 。MathJax 支持整个 Tex 语法，但是在制作电子书版本时不是很完美。 KaTex 在所有格式（网页和电子书）的绘制上都很完美，但是还不支持 所有的语法。 更多其他插件选择 https://www.cnblogs.com/mingyue5826/p/10307051.html https://www.jianshu.com/p/53fccf623f1c https://www.jianshu.com/p/427b8bb066e6 book.json配置（直接用本书配置来说明） { \"title\": \"hqbook\", \"author\": \"Haoqiang Chen\", \"description\": \"平时零散编程笔记收录手册，以便日后查阅。\", \"keywords\": \"编程,markdown,笔记\", \"introduction\": { \"path\": \"README.md\", \"title\": \"hqbook\" }, \"links\": { \"home\": false, \"about\": false, \"issues\": false, \"contribute\": false, \"tail\": { \"GitHub地址\": \"https://github.com/HaoqiangChen/hqbook\" }, \"gitbook\": false, \"sharing\": { \"google\": true, \"facebook\": true, \"twitter\": true, \"weibo\": true, \"qrcode\": true } }, \"variables\": { \"themeColor\": \"#3884ff\", \"themeHqbook\": { \"nav\": [ { \"url\": \"https://www.baidu.com\", \"target\": \"_blank\", \"name\": \"百度一下\" } ] } }, \"plugins\": [ \"-highlight\", \"-lunr\", \"-search\", \"theme-hqbook\", \"chapter-fold\", \"flexible-alerts\", \"prism\", \"search-pro\", \"sitemap\" ], \"pluginsConfig\": { \"fontSettings\": { \"theme\": \"white\", \"family\": \"serif\", \"size\": 1 }, \"chapter-fold\": {}, \"flexible-alerts\": { \"style\": \"flat\", \"comment\": { \"label\": \"Comment\", \"icon\": \"fa fa-comments\", \"className\": \"info\" } }, \"localized-footer\": { \"hline\": true, \"filename\": \"./FOOTER.md\" }, \"prism\": { \"css\": [ \"gitbook-plugin-theme-hqbook/_themes/prism-xonokai.css\" ] }, \"styles\": { \"website\": \"styles/website.css\" }, \"theme-hqbook\": { \"favicon\": \"./favicon.ico\", \"logo\": \"../../images/home/logo.png\", \"search-placeholder\": \"输入关键字搜索\", \"copyLines\": false, \"hide-elements\": [ \".summary .gitbook-link\" ] }, \"sitemap\": { \"hostname\": \"https://chq.github.io/\" } }, \"pdf\": { \"toc\": true, \"pageNumbers\": true, \"fontSize\": 12, \"paperSize\": \"a4\", \"margin\": { \"right\": 62, \"left\": 62, \"top\": 36, \"bottom\": 36 } } } "},"Tools/gitbook/templating.html":{"url":"Tools/gitbook/templating.html","title":"模板","keywords":"","body":"模板 GitBook使用Nunjucks模板语言来处理页面和主题的模板。 Nunjucks语法与Jinja2或Liquid非常相似。语法使用大括号{}来标记需要处理的内容。 变量 变量从模板上下文中查找值。如果你想简单地显示一个变量，你可以使用{{variable}}语法。例如 ： 我的名字是{{ name }}，很高兴见到你 它从上下文中查找用户名并显示它。变量名称在其中可以有点像查找属性，就像JavaScript。您还可以使用方括号语法。 {{ foo.bar }} {{ foo[\"bar\"] }} 如果值未定义，则不显示任何内容。如果foo未定义，下面的所有输出都不会输出：{{ foo }}, {{ foo.bar }}, {{ foo.bar.baz }}。 GitBook提供了预定义变量。 过滤器 过滤器本质上是可以应用于变量的函数。它们用管道操作符(|)调用，并且可以接受参数。 {{ foo | title }} {{ foo | join(\",\") }} {{ foo | replace(\"foo\", \"bar\") | capitalize }} 第三个示例显示了如何链接过滤器。首先将“ foo”替换为“ bar”，然后将其大写，从而显示“ Bar”。 标签 if if 根据条件选择显示内容。它的行为与JavaScript的if行为完全一样。 {% if variable %} It is true {% endif %} 如果变量被定义并且计算结果为true，将显示“It is true”。否则，什么都不会显示。 您可以使用elif和else指定替代条件： {% if hungry %} I am hungry {% elif tired %} I am tired {% else %} I am good! {% endif %} for for 遍历数组和对象。 # Chapters about GitBook {% for article in glossary.terms['gitbook'].articles %} * [{{ article.title }}]({{ article.path }}) {% endfor %} set set 允许你创建/修改一个变量。 {% set softwareVersion = \"1.0.0\" %} Current version is {{ softwareVersion }}. [Download it](website.com/download/{{ softwareVersion }}) 转义 如果您希望GitBook忽略任何特殊的模板标签，则可以使用raw，并且其中的任何内容都将以纯文本格式输出。 {% raw %} this will {{ not be processed }} {% endraw %} 内容引用 内容引用（conref）是一种方便的机制，可以重用其他文件或书籍中的内容。 导入本地文件 使用include标签可以轻松导入其他文件的内容： {% include \"./test.md\" %} 从另一本书导入文件 GitBook还可以使用git解析包含路径： {% include \"git+https://github.com/GitbookIO/documentation.git/README.md#0.0.1\" %} git url的格式为： git+https://user@hostname/owner/project.git/file#commit-ish 真正的git url部分应该用.git结尾，导入的文件名在.git之后被提取，直到url的片段。 commit-ish是引用项目的分支。默认为master。 继承 模板继承是一种方便重用的方法。在编写模板时，定义子模板可以覆盖父模板的\"blocks\"。 block定义模板上的一个部分，并用一个名字来标识它。基本模板可以指定块，子模板可以用新内容覆盖它们。 {% extends \"./mypage.md\" %} {% block pageContent %} # This is my page content {% endblock %} 在mypage.md中，你应该指定可以扩展的块： {% block pageContent %} This is the default content {% endblock %} # License {% include \"./LICENSE\" %} 变量 以下是书的解析和主题生成期间可用数据的参考。 全局变量 变量 说明 book book.json的全书信息+配置设置。详情请参阅下文。 gitbook GitBook特定信息 page 当前页特定信息 file 与当前页特定信息相关联的文件 readme 自述相关内容 glossary 词汇相关内容 summary 菜单相关内容 languages 多语言书籍列表 output 输出相关内容 config book.json相关内容 书本变量 变量 说明 book.[CONFIGURATION_DATA] 在book.json中的variables下的所有其他值都可以在这里访问 book.language 多语言书的当前语言 例如，这个book.json： { variables: { hello: \"everyone\" } } ...下面的文本 {{ book.hello }} 将会展开为 everyone。 GitBook变量 变量 说明 gitbook.time 当前时间(当你运行gitbook命令时)。 gitbook.version GitBook用于生成图书的版本 文件变量 变量 说明 file.path 原始页面的路径 file.mtime 修改时间。上次修改文件的时间 file.type 用于编译此文件的语法解析器的名称(例如：markdown，asciidoc等) 页面变量 变量 说明 page.title 页面标题 page.previous 内容页的上一页(可以是null) page.next 内容页的下一页 (可以是null) page.dir 文本方向，基于配置(rtl或ltr) 目录变量 变量 说明 summary.parts 内容列表 可以访问整个目录(SUMMARY.md)： summary.parts[0].articles[0].title 将返回第一篇文章的标题。 多语言环境变量 变量 说明 languages.list 本书的语言环境列表 定义一种语言的方式：{ id: 'en', title: 'English' }. 输出变量 变量 说明 output.name 输出生成器的名称，可能的值是website, json, ebook output.format 当 output.name == \"ebook\", format 定义了将要生成的电子书的格式，可能的值是 pdf, epub 或 mobi 自述文件变量 变量 说明 readme.path 自述文件的路径 词汇表变量 变量 说明 glossary.path 词汇表的路径 模板助手 GitBook提供了一个内置过滤器和块来帮助您编写模板。 过滤器 value|default(default, [boolean]) 值如果未定义，则返回默认值，否则返回值。 如果boolean为true，任何JavaScript falsy值将返回默认值 (false, \"\", etc) arr|sort(reverse, caseSens, attr) 使用JavaScript的arr.sort函数排序数组。 如果reverse为true，则结果将被反转。 默认情况下，排序不区分大小写，但将caseSens设置为true会使它区分大小写。 最后会比较数组中每个元素的的大小。 块 {% markdown %}Markdown string{% endmarkdown %}渲染内联markdown {% asciidoc %}AsciiDoc string{% endasciidoc %}渲染内联asciidoc "},"Tools/gitbook/build.html":{"url":"Tools/gitbook/build.html","title":"打包和发布","keywords":"","body":"Gitbook 打包输出 输出为静态网站 你有两种方式输出一个静态的网站： 本地预览是自动生成 当你编辑好 gitbook 文档之后，你可以使用 gitbook 的命令来进行本地预览。 $ gitbook serve ./{book_name} gitbook会启动一个4000端口用于预览。 比如，通过gitbook serve来预览本文档： $ gitbook serve gitbook-howtouse Press CTRL+C to quit ... Live reload server started on port: 35729 Starting build ... Successfully built! Starting server ... Serving book on http://localhost:4000 你可以你的浏览器中打开这个网址： http://localhost:4000 你会发现，在你编辑的gitbook项目的目录中会多一个_book目录，而这个目录中就是生成的本地预览的静态网站内容。 使用gitbook build参数 与直接预览生成的静态网站不一样的时，使用这个命令，你可以将内容输出到你想要的目录。如果不使用 --output 参数则默认在当前文件夹下 $ gitbook build --output=/tmp/gitbook Starting build ... Successfuly built ! $ ls /tmp/gitbook/ howtouse search_index.json book imgs output gitbook index.html publish 无论哪种方式，你都可以将这个静态网站打包，发布到你想要发布的服务器上，或者直接将这个打包文件给阅读者。 生成电子书和PDF GitBook不仅可以生成静态网站，也可以将内容输出为电子书(ePub，Mobi，PDF)格式。 ＃生成PDF文件 $ gitbook pdf ./ ./mybook.pdf ＃生成ePub文件 $ gitbook epub ./ ./mybook.epub ＃生成Mobi文件 $ gitbook mobi ./ ./mybook.mobi 安装ebook-convert ebook-convert 是生成电子书所必需的(epub，mobi，pdf)插件。 Linux系统 安装Caliber应用程序。 $ sudo aptitude install calibre 在某些Linux发行版中安装nodejs，您还需要手动创建一个nodejs软链接： $sudo ln -s /usr/bin/nodejs /usr/bin/node 苹果OS X系统 下载Caliber应用程序。将calibre.app移动到您的应用程序文件夹后，创建一个指向ebook-convert工具的软件链接： $ sudo ln -s ~/Applications/calibre.app/Contents/MacOS/ebook-convert /usr/bin 这样就可以在任何目录下执行目录执行ebook-convert命令。 如果出现Operation not permitted异常，说明系统权限限制，需要配置环境变量的方式解决 $ sudo ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/bin ln: /usr/bin/ebook-convert: Operation not permitted 环境变量配置 先启动ebook-convert完成第一次启动配置，然后关闭。接着在命令行窗口修改环境配置文件，加入EBOOK_PATH（ebook-convert命令的所在目录） vim ~/.bash_profile export EBOOK_PATH=/Applications/calibre.app/Contents/MacOS export PATH=$PATH:$EBOOK_PATH 然后刷新一下刚刚的配置: source ~/.bash_profile 最后测试一下ebook-convert指令是否能正常被调用： $ ebook-convert --version ebook-convert (calibre 2.81.0) Created by: Kovid Goyal 大功告成！下面就可以使用gitbook pdf ./ ./mybook.pdf 命令把你的项目生成pdf文档了！ 封面 Gitbook 的封面可以通过插件auto cover自动生成，也可以自己配置。 如果要使用自定义的封面，在书籍的根目录下放置 cover.jpg，如果想要小版本封面可以放置 cover_small.jpg，文件格式必须为 jpg 一个合格的封面应遵守以下准则： 大小要求 cover.jpg 1800x2360 像素 , cover_small.jpg 200x262 不要有边框 清晰可见的书名 任何重要的文本应该在小版本中可见 自动封面 GitBook插件 (autocover) 同样可以用来为你生成一个封面文件，或者仅仅从大封面中生成 cover_small.jpg。这个插件默认会被添加到托管的书本中。 生成PDF 进入文档项目目录，输入gitbook pdf ./ ./gitbook.pdf $ cd ~/gitbook-cn $ gitbook pdf ./ ./gitbook.pdf pdf： 表示生成pdf格式，还有epub、mobi可选 ./ ： 表示需要生成书籍的项目根目录 ./gitbook.pdf : 表示生成书籍的名称 如果你的书籍有多种语言，就会生成多本书籍，书籍的名称会以语言结尾 Gitbook 发布 可以使用Github Pages服务将我们写的Gitbook发布到互联网上，前提是你已经了解了Git、Github及Github Pages的使用。 发布到 Gitbook.com Gitbook.com 是一个发布gitbook编写书籍的在线网站，提供公开和私有的托管服务，和GitHub一样，私有的Gitbook是需要付费使用的。但是公开的书籍是无上限的，使用在线的Gitbook可以让未接触过Git和Markdown的作者轻松的创建书籍，并且在线的编辑器可以让作者安心的只关心内容，而不必在意排版，并且支持多人协作编写。 在Gitbook上建立账户，新建项目之后，其实也是一个 Git 项目，如果对 Git 熟悉，将本地内容推送到远端即可。 发布到Github Pages GitHub Pages 是 GitHub 提供的静态网站托管服务。 GitHub 上的每个仓库都可以拥有一个 GitHub Pages，对应的 URL 如下： https://.github.io// GitHub Pages 的静态资源支持下面 3 个来源： master 分支 master 分支的 /docs 目录 gh-pages 分支 你可以在项目页面右下角setting中看到： 小浩就是直接将静态资源设置为第二个master 分支的 /docs 目录，然后开发完后因为gitbook serve已经生成打包了_book，所以直接重命名为 docs文件夹，之后直接提交到master分支。 将静态网站直接发布到Github Pages 可以将编写好的.md文件通过Gitbook处理成静态网站，然后发布到Github Pages上。 将md文件与Github Pages静态文件存放在一个仓库中。md文件为master分支，而html文件为 gh-pages分支。 下面将介绍使用一个仓库托管源码，而使用 Travis 自动将静态网站发布到 gh-pages 分支中。这样就可以避免提交源码的同时，还需要同步一遍 gh-pages 分支。 domenic 制作了一个脚本，当 master 分支更新时，自动使用 CI Travis 拉取更新，然后和 gh-pages 分支做比较，如果有差异了，自动将 master 分支的修改提交到 gh-pages 分支。 使用项目的Pages服务 除了上面的直接发布静态文件到Github Pages的方法以外，还可以使用一个单独的项目的Github Pages功能。 创建仓库与分支 登陆到Github，创建一个新的仓库，名称我们就命名为gitbook-tutorial，这样我就得到一个gitbook-tutorial仓库。 克隆仓库到本地： git clone git@github.com:/USER_NAME/gitbook-tutorial.git 创建一个新分支： git checkout -b gh-pages，注意，分支名必须为gh-pages。 将分支push到仓库： git push -u origin gh-pages。 切换到主分支：git checkout master。 经过这一步处理，我们已经创建了gh-pages分支了，有了这个分支，Github会自动为你分配一个网址。 http://USERNAME.github.io/gitbook-tutorial 打包gitbook项目发布到GitHub pages 执行下面命令，将 _book 目录推送到 GitHub 仓库的 gh-pages 分支。 $ git subtree push --prefix=_book origin gh-pages 或者在生成静态网页时，将保存的目录指定为 ./docs $ $ gitbook build ./ ./docs 然后直接推送到 GitHub 仓库的。 $ git push origin master "},"Tools/markdown/":{"url":"Tools/markdown/","title":"Markdown","keywords":"","body":" Markdown Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。Markdown 编写的文档后缀为 .md, .markdown。 Markdown 标题 Markdown 标题有两种格式。 第一种：使用 = 和 - 标记一级和二级标题 这是一个一级标题 ============================ 这是一个二级标题 -------------------------------------------------- 第二种：使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 一级标题字号最大，依级递减。 显示效果： 段落格式 Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。 第一行 ☞末尾添加两个空格 就可换行 第二行 当然也可以在段落后面使用一个空行来表示重新开始一个段落。 第一行 第二段落第一行 字体 Markdown使用星号*和底线_作为标记强调字词的符号，被*或_包围的字词会被转成用标签包围，用两个如**或__包起来的话， 则会被转成，用~~包起来的话，则会被转成，但是目前markdownPad2和GitHub的markdown并不支持删除线这个语法功能， 可以直接用html的或代替，而且下划线只能通过 HTML 的 标签来实现。 *斜体* 或 _斜体_ **粗体** 或 __粗体__ ***加粗斜体*** 或 ___加粗斜体___ ~~删除线~~ 带下划线文本 显示效果： 这是一段斜体 这是一段粗体 这是一段加粗斜体 这是一段删除线 带下划线文本 分隔线 你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： *** * * * ***** - - - ---------- 显示效果都是一样的一条分隔线，显示效果如下 脚注 脚注是对文本的补充说明。在需要添加注脚的文字后加上脚注名字[^注脚名字],称为脚注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。 [!Warning|label: 注意] 脚注 id 必须唯一；经测试脚注根据不同编译器会有不同效果。区别如下：一般线上的markdown编译器效果为：（1）无论脚注 id 如何起名，显示时一律标为数字，并且按出现顺序排列；（2）即使你没有把注脚写在文末，显示出来的效果也会自动归类到文章的最后。 gitbook Cli 脚注与注脚之间必须空一行，不然会失效。注脚并不会自动归类到文章最后，所以最好手动写到文章最后。 创建脚注格式类似这样 [^HQBOOK]。 [^HQBOOK]: hqbook -- A book for note。 gitbook Cli显示效果：创建脚注格式类似这样 HQBOOK。 其他markdown编译器显示效果： 列表 无序列表 使用 *，+，- 表示无序列表，三个都显示为实心圆点。 - 无序列表项 一 - 无序列表项 二 - 无序列表项 三 显示效果： 无序列表项 一 无序列表项 二 无序列表项 三 有序列表 有序列表则使用数字接着一个英文句点.再加个空格。 1. 有序列表项 一 2. 有序列表项 二 3. 有序列表项 三 显示效果： 有序列表项 一 有序列表项 二 有序列表项 三 列表嵌套 列表嵌套只需在子列表中的选项添加四个空格即可。 1. 第一项： - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素 2. 第二项： - 第二项嵌套的第一个元素 - 第二项嵌套的第二个元素 显示效果： 第一项： 第一项嵌套的第一个元素 第一项嵌套的第二个元素 第二项： 第二项嵌套的第一个元素 第二项嵌套的第二个元素 列表特殊情况 在特殊情况下，项目列表很可能会不小心产生，像是下面这样的写法： 2008. 北京奥运会欢迎您！ 会显示成： 北京奥运会欢迎您！ 换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠： 2008\\. 北京奥运会欢迎您！ 才能正常显示成：2008. 北京奥运会欢迎您！ 区块引用 Markdown 区块引用是在段落开头使用 > 符号 ，然后后面紧跟一个空格符号： > 这是一个有两段文字的引用, > Markdown 区块引用 > hqbook > 学的不仅是技术更是梦想 显示效果： 这是一个有两段文字的引用,Markdown 区块引用 hqbook学的不仅是技术更是梦想 Markdown 也允许你偷懒只在整个段落的第一行最前面加上`>``： > 这是一个有两段文字的引用, Markdown 区块引用 > hqbook 学的不仅是技术更是梦想 显示效果： 这是一个有两段文字的引用,Markdown 区块引用 hqbook学的不仅是技术更是梦想 区块的多层嵌套 区块引用可以嵌套，一个> 符号是最外层，两个> 符号是第一层嵌套，以此类推： > 最外层 >> 第一层嵌套 >>> 第二层嵌套 显示效果： 最外层 第一层嵌套 第二层嵌套 区块中引用其它要素 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： > 区块中使用列表 > 1. 第一项 > 2. 第二项 > + 第一项 > + 第二项 > > 给出一些例子代码： > return shell_exec(\"echo $input | $markdown_script\"); 显示效果： 区块中使用列表 第一项 第二项 第一项 第二项 给出一些例子代码：return shell_exec(\"echo $input | $markdown_script\"); 列表中使用区块 如果要在列表项目内放进区块，那么就需要在 > 前添加四个空格的缩进。 * 第一项 > hqbook > A book for note * 第二项 显示效果： 第一项 hqbookA book for note 第二项 代码 [!Tip] Markdown 支持使用原生html代码 如果是段落上的一个函数或片段的代码可以用反引号`把它包起来，也可以将某些字眼加上反引号达到显眼的作用。例如： `printf()` 函数 随便敲打几个字，在这行字里面用`反引号`突出某些字眼，比如`hqbook` 显示效果： printf() 函数随便敲打几个字，在这行字里面用反引号突出某些字眼，比如hqbook 代码区块 代码区块使用```包裹一段代码，并指定一种语言（也可以不指定）： ```javascript $(document).ready(function () { alert('hqbook'); }); ``` 显示效果： $(document).ready(function () { alert('hqbook'); }); 你也可以用4 个空格或者一个制表符（Tab 键） 显示效果： 支持的 HTML 元素 不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。 目前支持的 HTML 元素有： 等 ，如： 使用 Ctrl+Alt+Del 重启电脑 显示效果： 使用 Ctrl+Alt+Del 重启电脑 转义 Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： 符号 符号 符号 \\ 反斜线 ` 反引号 * 星号 _ 下划线 {} 花括号 [] 方括号 () 小括号 # 井字号 + 加号 - 减号 . 英文句点 * 感叹号 超链接 Markdown 支持两种形式的链接语法： 行内式和参考式两种形式，行内式一般使用较多。 行内式 语法说明： []里写链接文字，()里写链接地址, ()里面\" \"中的内容可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。[链接文字](链接地址 \"链接标题\")这样的形式。链接地址与链接标题前有一个空格。 欢迎来到[Markdown语法篇](https://github.com/HaoqiangChen/Hq-note/tree/master/markdown) 欢迎来到[Markdown语法篇](https://github.com/HaoqiangChen/Hq-note/tree/master/markdown \"Markdown语法篇\") 显示效果： 欢迎来到Markdown语法篇 欢迎来到Markdown语法篇 参考式 参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。 语法说明： 参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址 \"链接标题\"，链接地址与链接标题前有一个空格。 如果链接文字本身可以做为链接标记，你也可以写成[链接文字][] [链接文字]：链接地址的形式，见代码的最后一行。 欢迎阅读本[Markdown语法篇][1]，还有这几篇高手总结的也不错：[入门篇][2]、 [简明版][3]、[完整版][4]，我就喜欢把百家汇成[自己一家][]^_^。 [1]:https://github.com/HaoqiangChen/Hq-note/tree/master/markdown \"Markdown语法篇\" [2]:https://www.jianshu.com/p/1e402922ee32 \"入门篇\" [3]:https://www.jianshu.com/p/6bf6735993ec \"简明版\" [4]:https://www.runoob.com/markdown/md-tutorial.html \"完整版\" [自己一家]:https://github.com/HaoqiangChen/Hq-note/tree/master/markdown 显示效果： 欢迎阅读本Markdown语法篇，还有这几篇高手总结的也不错：入门篇、简明版、完整版，我就喜欢把百家汇成自己一家^_^。 自动链接 语法说明： Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用<>包起来，Markdown就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如： 显示效果： http://example.com/address@example.com 锚点 网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有markdown的脚注。这些根本上都是用锚点来实现的。 语法描述： 使用[TOC]标记编辑器会把所有标题写到目录大纲中，该功能原生不支持； 在你准备跳转到的指定标题后插入锚点{#标记}，然后在文档的其它地方写上连接到锚点的链接[标记](#标记)。 直接HTML语法锚点功能。 [TOC] ## 脚注{#footnote} 跳转到[脚注](#footnote) 上面这两种方法原生markdown(GitHub)都不支持，不过第二种方法在`gitbook cli`可行 显示效果： 跳转到脚注 图片 图片的创建方式与超链接相似（在超链接前面加个!感叹号），而且和超链接一样也有两种写法，行内式和参考式写法。 语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。 [!Tip] Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 标签 行内式 语法说明：![图片Alt](图片地址 \"图片Title\") 美丽花儿： ![美丽花儿](../../images/markdown/flower.jpg \"美丽花儿\") 显示效果： 美丽花儿： 参考式 语法说明： 在文档要插入图片的地方写![图片Alt][标记] 在文档的最后写上[标记]:图片地址 \"Title\" 美丽花儿： ![美丽花儿][flower] [flower]:../../images/markdown/flower.jpg \"美丽花儿\" 显示效果： 美丽花儿： 表格 语法说明： 表格使用|来分隔不同的单元格，第一行为表头，第二行使用-来分隔表头和主体部分，第三行开始每一行为一个表格行； 列于列之间用管道符|隔开。原生markdown的表格每一行的两边也要有管道符，而有些编辑器是可以省略的，具体使用视情况而定； 第二行还可以为不同的列指定对齐方向。默认为左对齐。有时候为了代码可读好看，第二行-可以使用多个。 :-或者- 表格内容和表头居左对齐 :-: 居中对齐 -: 右对齐 | 表头 | 左对齐 | 居中对齐 | 右对齐 | | ---- | :--- | :---: | ---: | | 单元格 | 单元格 | 单元格 | 单元格 | | 单元格 | 单元格 | 单元格 | 单元格 | 显示效果： 表头 左对齐 居中对齐 右对齐 单元格 单元格 单元格 单元格 单元格 单元格 单元格 单元格 LaTeX 公式 [!Warning|label: 注意] 原生markdown不支持LaTeX 公式，有两种可以解决，一种在线LaTeX 数学公式编辑工具生成图片展示，一种使用gitbook插件 在线LaTeX 数学公式编辑工具 可以用codecogs的云服务，在线LaTeX 数学公式编辑工具，api+一大串LaTex，比如： 当然这么强大的在线公式编辑器肯定提供了在线GUI给大家，打开网址：http://www.codecogs.com/latex/eqneditor.php， 你就可以随心所欲的编辑公式了，它同样想Mathtype一样提供了不少模板，直接编辑，也很方便。编辑完成之后，页面上就会实时得到编辑的Latex格式公式图片， 右击图片，选择“属性”，复制其链接地址，就是其引用地址了。（这种麻烦操作当然是针对IE了，其他浏览器直接点“复制图片地址”）或者这个网址：http://latex.codecogs.com/这个网址的使用方法：![](http://latex.codecogs.com/gif.latex?\\\\frac{1}{1+sin(x)}\\) + 生成的公式地址 gitbook插件 数学插件 & Tex 有不少gitbook插件 支持 Tex 公式绘制，比如mathjax 和 katex，具体可看数学插件 $ 表示行内公式 支持LaTeX 公式的话： 质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。 不支持则使用 ![](http://latex.codecogs.com/gif.latex?E=mc^2) 来表达。 显示效果： 支持LaTeX 公式的话：质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。不支持则使用 来表达。 $$ 表示整行公式 当你需要在编辑器中插入数学公式时，可以使用两个美元符$$包裹TeX或LaTeX格式的数学公式来实现。提交后，问答和文章页会根据需要加载Mathjax对数学公式进行渲染。如： 支持LaTeX 公式的话： $$\\sum_{i=1}^n a_i=0$$ $$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$ $$\\sum^{j-1}_{k=0}{\\widehat{\\gamma}_{kj} z_k}$$ 原生不支持，可使用以下图片： ![](http://latex.codecogs.com/gif.latex?\\\\sum_{i=1}^n&space;a_i=0 \"\\sum_{i=1}^n a_i=0\") ![](http://latex.codecogs.com/gif.latex?\\\\sum^{j-1}_{k=0}{\\widehat{\\gamma}_{kj}&space;z_k} \"\\sum^{j-1}_{k=0}{\\widehat{\\gamma}_{kj} z_k}\") 显示效果： 访问 MathJax 参考更多使用方法。 流程图 [!Warning|label: 注意] 原生markdown不支持流程图，有两种可以解决，一种用一些支持流程图的编辑器先画出来，然后截图生成图片展示，一种使用gitbook插件mermaid 举例： 标准流程图源码格式： ```flow st=>start: 开始框 op=>operation: 处理框 cond=>condition: 判断框(是或否?) sub1=>subroutine: 子流程 io=>inputoutput: 输入输出框 e=>end: 结束框 st->op->cond cond(yes)->io->e cond(no)->sub1(right)->op ``` UML时序图源码样例： ```sequence 对象A->对象B: 对象B你好吗?（请求） Note right of 对象B: 对象B的描述 Note left of 对象A: 对象A的描述(提示) 对象B-->对象A: 我很好(响应) 对象A->对象B: 你真的好吗？ ``` 显示效果： 更多语法参考：流程图语法参考 HQBOOK. hqbook -- A book for note。 ↩ "}}